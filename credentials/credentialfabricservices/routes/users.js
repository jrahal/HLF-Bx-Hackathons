"use strict";
const express = require('express');
const router = express.Router();
const FabricAdminConnection = require('../models/FabricAdminConnection');

/* Create a new user. */
/* Request requires Authorization header with "bearer <token>"
/* Request should be in JSON format containing:
 *  {
 *    email: "jdoe@domain.com",
 *    firstName: "John",
 *    lastName: "Doe",
 *    participantType: "Member or Authority or Reviewer"
 *  }
 *
 *  Responds with:
 *  201 if created
 *  {
 *    userID: "uuid generated by system",
 *    userSecret: "token generated by system",
 *    businessNetwork: "business network for this identity",
 *    email: "jdoe@domain.com",
 *    firstName: "John",
 *    lastName: "Doe"
 *  }
 *  400 if error in post data
 *  403 if invalid token in header
 *  409 if user already exists, as detected by email for that Participant Type
 *
 */
router.post('/', function (req, res, next) {
    res.set('Content-Type', 'application/json');

    // Verify authorization for creating a json web token
    try {
        const authHeader = req.headers['authorization'].split(' ');
        if ((authHeader.length !== 2)
            || (authHeader[0] !== 'bearer')
            || (authHeader[1] !== process.env.credentialservices_token)) {

            throw new Error('Invalid authorization token header.');
        }
    } catch (e) {
        e.status = 403;
        return next(e);
    }

    // Verify payload is correct
    try {
        const validEmailRE = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        if (!validEmailRE.test(req.body.email)
            || !req.body.firstName.trim().length
            || !req.body.lastName.trim().length
            || !(['Member', 'Authority', 'Reviewer'].includes(req.body.participantType))) {
            throw new Error('Incorrect input payload.');
        }
    } catch (e) {
        e.status = 400;
        return next(e);
    }

    // Create the user
    FabricAdminConnection.createAdminConnection()
        .then( (connection) => {
            console.log(connection);
            return connection.createUser(req.body.email, req.body.firstName.trim(), req.body.lastName, req.body.participantType)
        })
        .then((newUser) => {
            console.log(newUser);
            if( newUser == null ) {
                res.status(409);
                res.json(null);
            } else {
                res.status(201);
                res.json(newUser);
            }
        })
        .catch((e) => {
            e.status = 409;
            next(e);
        });
});

module.exports = router;
