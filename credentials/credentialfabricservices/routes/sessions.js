"use strict";
const express = require('express');
const router = express.Router();
const FabricConnection = require('../models/FabricConnection');
const jwt = require('jsonwebtoken');

/* Create a new session token. */
/* Request requires Authorization header with "bearer <token>"
 * Request should include
 *  {
 *    userID: "uuid generated by system",
 *    userSecret: "token generated by system"
 *  }
 *
 *  Responds with:
 *  201 if created
 *  {
 *    jwt: "Json web token"
 *  }
 *  400 if error in post data
 *  403 if invalid token in header or login information is incorrect
 *
 */
router.post('/', function (req, res, next) {
    res.set('Content-Type', 'application/json');

    // Verify authorization for creating a user
    try {
        const authHeader = req.headers['authorization'].split(' ');
        if ((authHeader.length !== 2)
            || (authHeader[0] !== 'bearer')
            || (authHeader[1] !== process.env.credentialservices_token)) {

            throw new Error('Invalid authorization token header.');
        }
    } catch (e) {
        e.status = 403;
        return next(e);
    }

    // Verify payload is correct
    try {
        if (!req.body.userID.trim().length
            || !req.body.userSecret.trim().length) {
            throw new Error('Incorrect input payload.');
        }
    } catch (e) {
        e.status = 400;
        return next(e);
    }

    // Authenticate user
    FabricConnection.createConnection(req.body.userID, req.body.userSecret)
        .then((connection) => {
            return connection.connection.ping();
        })
        .then((identity) => {
            req.body.participant = identity.participant;
            const token = jwt.sign(req.body, process.env.jwt_secret, {
                expiresIn: "1h",
                issuer: process.env.issuer_id
            });
            res.status(200);
            res.json({token: token, body: req.body });
        })
        .catch((e) => {
            e.status = 409;
            next(e);
        });
});

module.exports = router;
